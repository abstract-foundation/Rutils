package jossip

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	"github.com/Awesome-Sauces/cross-chain/consensus"
)

// Node represents a node in the distributed network.
type Node struct {
	Self      *consensus.Profiler
	Profilers map[string]*consensus.Profiler
	Peers     []*consensus.Profiler // IDs of other nodes in the network
}

// MessageRequest represents the structure of the incoming message request.
type MessageRequest struct {
	Sender  string `json:"sender"`
	Message string `json:"message"`
}

// MessageResponse represents the response to the message request.
type MessageResponse struct {
	Accepted bool   `json:"accepted"`
	Message  string `json:"message"`
}

func (n *Node) GenerateProfiler() *consensus.Profiler {
	return &consensus.Profiler{}
}

func (n *Node) receiveMessage(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Invalid request method", http.StatusMethodNotAllowed)
		return
	}

	decoder := json.NewDecoder(r.Body)
	var messageReq MessageRequest
	if err := decoder.Decode(&messageReq); err != nil {
		http.Error(w, "Invalid request", http.StatusBadRequest)
		return
	}

	/* MESSAGE PROCESS */

	// Process the message (you can implement your own logic here)
	accepted := false
	responseMessage := "Message accepted"

	/* RESPONSE SECTION */

	// Prepare the response
	messageResponse := MessageResponse{
		Accepted: accepted,
		Message:  responseMessage,
	}

	// Send the response as JSON
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(messageResponse); err != nil {
		http.Error(w, "Error encoding response", http.StatusInternalServerError)
		return
	}
}

func (n *Node) propagateMessage(message string) {
	for _, profile := range n.Peers {
		// Construct the URL for the peer's receive message endpoint
		url := fmt.Sprintf("http://%s:%d/receive-message", profile.Host, profile.Port)

		// Create the message request
		messageReq := MessageRequest{
			Sender:  n.ID,
			Message: message,
		}

		// Convert the message request to JSON
		payload, err := json.Marshal(messageReq)
		if err != nil {
			log.Printf("Error encoding message: %v", err)
			continue
		}

		// Send a POST request to the peer's receive message endpoint
		resp, err := http.Post(url, "application/json", bytes.NewBuffer(payload))
		if err != nil {
			log.Printf("Error sending message to peer %s: %v", profile.Host, err)
			continue
		}

		defer resp.Body.Close()

		// Read and log the response from the peer
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Printf("Error reading response from peer %s: %v", profile.Host, err)
			continue
		}

		log.Printf("Message sent to peer %s. Response: %s", profile.Host, body)
	}
}

func (n *Node) startServer() {
	// Register the endpoint specific to this node
	http.HandleFunc("/receive-message", n.receiveMessage)

	// Listen and serve HTTP requests
	addr := fmt.Sprintf("%s:%d", n.Host, n.Port)
	log.Printf("Node %s is running on %s\n", n.ID, addr)
	log.Fatal(http.ListenAndServe(addr, nil))
}

func TESTj() {
	// Create multiple nodes
	/*
		node1 := Node{
			ID:        "node1",
			Host:      "localhost",
			Port:      8080,
			Peers:     []*consensus.Profiler{},
			Profilers: make(map[string]*consensus.Profiler),
		}

		node2 := Node{
			ID:        "node2",
			Host:      "localhost",
			Port:      8081,
			Peers:     []*consensus.Profiler{node1.GenerateProfiler()},
			Profilers: make(map[string]*consensus.Profiler),
		}

		// Start servers for each node
		go node1.startServer()
		go node2.startServer()

		// Simulate sending a message from node1 to node2
		message := "Hello from node1!"
		node1.propagateMessage(message)
	*/
}
